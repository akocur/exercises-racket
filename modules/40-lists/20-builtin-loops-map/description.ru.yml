---

name: Встроенные средства обхода списков, map
theory: |

  Любой список рано или поздно захочется *обойти* (*traverse*), то есть поработать с отдельными элементами. В процедурных языках используются циклы, но многие языки имеют и декларативные средства работы с коллекциями: `map`, `filter`, `reduce`. А ведь сами эти функции пришли в программирование через Lisp!

  Racket тоже предоставляет полный набор таких функций. Ближайшие несколько уроков будут посвящены им.

  ### `map`

  Итак, `map` в Racket используется так:

  ```scheme
  (map add1 (list 1 2 3)) ; '(2 3 4)
  ```

  Здесь `add1` — встроенная функция, добавляющая к числу единицу. Всё максимально предсказуемо: `map` превращает старый список в новый, применяя функцию к каждому элементу. Обход получается *функциональный*, потому что мы получаем **новый** список, не меняя старый.

  Может `map` обходить и несколько списков одновременно: если применить `map` к нескольким спискам, то функция-аргумент будет применена ко всем первым элементам, затем ко всем вторым и так далее. Но `map` потребует от входных списков иметь одинаковую длину, иначе вы получите ошибку.

  Вот так можно поэлементно просуммировать три списка:

  ```scheme
  (map +
       (list 1 2 3)
       (list 10 20 30)
       (list 100 200 300))
  ; '(111 222 333)
  ```

  Заметьте, не потребовалось даже использовать анонимную функцию, которая складывала бы три числа, ведь функция "`+`" принимает произвольное количество аргументов!

instructions: |

  Реализуйте функцию `maps`, которая должна принимать два списка — список функций и *список списков* аргументов — и возвращать список результатов применения функций к наборам аргументов. Вот как использование `maps` должно выглядеть:

  ```scheme
  (maps
    (list
     add1
     string?)
    (list
     (list 10 20)
     (list "a" 0)))
  ; '((11 21) (#t #f))
  ```

  Здесь:

  - `'(11 21)` — это результат применения `add1` к `(list 10 20)`;
  - `'(#t #f)` — это результат применения `string?` к `(list "a" 0)`.

tips:
  - |
    [map](https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29)
    [list](https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29)
